/* 4.2 Работа с текстовыми файлами и потоками
 Задание по программированию «Работа с файлами»
 В этом задании вам предстоит написать две небольшие программы. Каждый пункт -
 отдельная задача, решение отправляйте в поле с соответствующим номером.

 Часть 1 Ваша программа должна считать содержимое файла input.txt и
 напечатать его на экран без изменений.Гарантируется, что содержимое файла
 input.txt заканчивается переводом строки.

 Часть 2
 Снова считайте все содержимое файла input.txt, но на этот раз выведите его в
 файл output.txt . Точно так же гарантируется, что содержимое файла input.txt
 заканчивается переводом строки.
*/
#include <fstream>
#include <iomanip>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
int main_421()  //+422
{
    ifstream ins("input.txt");
    ofstream outs("output.txt");
    if (ins.is_open()) {
        string line;
        while (getline(ins, line)) cout << line << '\n';  // outs
    } else {
        cout << "error!" << endl;
    }

    return 0;
}

/*Задание 3 по программированию «Вывод с точностью»

В файле input.txt записаны вещественные числа, по одному на строчку. На
стандартный вывод напечатайте эти числа в том же порядке, по одному на строке,
но сделайте так, чтобы у каждого из них было ровно три знака после десятичной
точки.*/

int main_423()  //
{
    ifstream ins("input.txt");
    ofstream outs("output.txt");
    if (ins.is_open()) {
        string line;
        float n;
        while (ins >> n)  // считываем до первого не float
            cout << fixed << setprecision(3) << n << '\n';  // cout
    } else {
        cout << "error!" << endl;
    }

    return 0;
}

/*Задание 4 по программированию «Чтение и вывод таблицы»

В первой строке файла input.txt записаны два числа N и M. Далее в файле
находится таблица из N строк и M столбцов, представленная в формате CSV
(comma-separated values). Такой формат часто используется для текстового
представления таблиц с данными: в файле несколько строк, значения из разных
ячеек внутри строки отделены друг от друга запятыми. Ваша задача — вывести
данные на экран в виде таблицы. Формат таблицы:

1) размер ячейки равен 10,

2) соседние ячейки отделены друг от друга пробелом,

3) последняя ячейка в строке НЕ оканчивается пробелом,

4) последняя строка НЕ оканчивается символом перевода строки. Гарантируется, что
в таблице будет ровно N строк и M столбцов, значение каждой из ячеек — целое
число.*/

int main_424()  //
{
    ifstream ins("input.txt");
    if (ins) {
        string line;
        int value, row, column, i = 0;
        ins >> row;
        ins.ignore(1);
        ins >> column;
        while (ins >> value)  // считываем до первого не float
        {
            ++i;
            cout << setw(10) << value;
            if (i % column == 0) {  // если последняя ячейка в строке
                if (i >= row * column)  // если последняя ячейка в строке и в таблице
                    break;
                cout << '\n';
            } else
                cout << ' ';
            ins.ignore(1);
        }
    } else {
        cout << "error!" << endl;
    }

    return 0;
}

/*
Задание по программированию «Список студентов»

Определите структуру «Студент» со следующими полями: имя, фамилия, день, месяц и год рождения.
Создайте вектор из таких структур, заполните его из входных данных и затем по запросам выведите
нужные поля.

Формат ввода

Первая строка содержит одно целое число N от 0 до 10000 — число студентов.

Далее идут N строк, каждая из которых содержит две строки длиной от 1 до 15 символов — имя и фамилию
очередного студента, и три целых числа от 0 до 1000000000 — день, месяц и год рождения.

Следующая строка содержит одно целое число M от 0 до 10000 — число запросов.

Следующие M строк содержат строку длиной от 1 до 15 символов — запрос, и целое число от 0 до
1000000000 — номер студента (нумерация начинается с 1).

Формат вывода

Для запроса вида name K, где K от 1 до N, выведите через пробел имя и фамилию K-го студента.

Для запроса вида date K, где K от 1 до N, выведите через точку день, месяц и год рождения K-го
студента.

Для остальных запросов выведите bad request.
*/

struct Student
{
    string name;
    string sName;
    int d;
    int m;
    int y;
};

int main_425()  //
{
    int k_cin;

    cin >> k_cin;

    if (k_cin < 1 || k_cin > 1)
        return 0;

    vector<Student> vecStu(k_cin);

    for (int var = 0; var < vecStu.size(); ++var) {
        cin >> vecStu[var].name >> vecStu[var].sName >> vecStu[var].d >> vecStu[var].m
            >> vecStu[var].y;
    }

    cin >> k_cin;
    if (k_cin < 1 || k_cin > 1000)
        return 0;

    string cmd;
    string sud_id_s;

    for (int i = 0; i < k_cin; ++i) {
        cin >> cmd >> sud_id_s;

        if (sud_id_s.find(".") != std::string::npos || sud_id_s.find(",") != std::string::npos) {
            cout << "bad request" << endl;
            continue;
        }

        int sud_id = stoi(sud_id_s);

        if (sud_id < 1 || sud_id > vecStu.size()) {
            cout << "bad request" << endl;
            continue;
        }

        --sud_id;

        if (cmd == "name") {
            cout << vecStu[sud_id].name << " " << vecStu[sud_id].sName << endl;
        } else if (cmd == "date") {
            cout << vecStu[sud_id].d << "." << vecStu[sud_id].m << "." << vecStu[sud_id].y << endl;
        } else {
            cout << "bad request" << endl;
        }
    }

    return 0;
}
