#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

template <class T>
void PrintVector(vector<T> v)
{
  int i = 0;
  for (auto s : v)
  {
    cout << i << " : " << s << endl;
    ++i;
  }
}

int main_exempl()
{
  int n;
  cin >> n;
  vector<string> v(n);
  for (auto &s : v)
    cin >> s;

  PrintVector(v);
  return 0;
}

/*
2.3 - 1
Задание по программированию «Средняя температура»
Даны значения температуры, наблюдавшиеся в течение N подряд идущих дней. Найдите номера дней (в нумерации с нуля) со
значением температуры выше среднего арифметического за все N дней. Гарантируется, что среднее арифметическое значений
температуры является целым числом.
Формат ввода
Вводится число N, затем N неотрицательных целых чисел — значения
температуры в 0-й, 1-й, ... (N−1)-й день.
Формат вывода
Первое число K — количество дней, значение температуры в которых
выше среднего арифметического. Затем Kцелых чисел — номера этих дней.
https://stepik.org/lesson/283763/step/5?auth=login&unit=265062
*/
int main_average()
{
  int n, sum = 0, avrg = 0; //кол-во элем, сумма все элем, среднее знач
  cin >> n;

  vector<int> vect(n);
  vector<int> result;
  for (auto &v : vect)
  {
    cin >> v;
    sum += v;
  }
  if (n)
    avrg = sum / n;

  for (int i = 0; i < vect.size(); ++i)
  {
    if (vect[i] > avrg)
      result.push_back(vect[i]); // cout << i << " ";
  }

  cout << result.size() << endl;

  for (int i = 0; i < vect.size(); ++i)
  {
    if (vect[i] > avrg)
      cout << i << " ";
  }

  return 0;
}

/*
2.3 - 2
Задание по программированию «Очередь»
Люди стоят в очереди, но никогда не уходят из её начала, зато могут приходить в конец и уходить оттуда. Более того,
иногда некоторые люди могут прекращать и начинать беспокоиться из-за того, что очередь не продвигается. Реализуйте
обработку следующих операций над очередью:
WORRY i: пометить i-го человека с начала очереди (в нумерации с 0) как
беспокоящегося;
QUIET i: пометить i-го человека как успокоившегося;
COME k: добавить k спокойных человек в конец
очереди;
COME -k: убрать k человек из конца очереди;
WORRY_COUNT: узнать количество беспокоящихся людей в очереди.
Изначально очередь пуста.
*/
int main_is_nervous()
{
  int n, sum = 0, num = 0; //кол-во элем, сумма все элем, среднее знач
  cin >> n;
  vector<bool> is_nervous;
  string cmd_s;

  for (int i = 0; i < n; ++i)
  {
    cin >> cmd_s;
    if (cmd_s == "WORRY_COUNT")
    {
      // подсчитываем количество элементов в векторе is_nervous, равных true
      cout << count(begin(is_nervous), end(is_nervous), true) << endl;
    }
    else
      cin >> num;

    if (cmd_s == "WORRY" || cmd_s == "QUIET")
      is_nervous[num] = cmd_s == "WORRY";
    else if (cmd_s == "COME")
      is_nervous.resize(is_nervous.size() + num, false);
  }

  return 0;
}

/*-------------------------------------------------------------*/
/*
2.3 - 3
Задание по программированию «Ежемесячные дела»

У каждого из нас есть повторяющиеся ежемесячные дела, каждое из которых нужно выполнять в конкретный день каждого
месяца: оплата счетов за электричество, абонентская плата за связь и пр. Вам нужно реализовать работу со списком таких
дел на месяц, а именно, реализовать набор следующих операций:
ADD i s
Назначить дело с названием s на день i текущего
месяца.
DUMP i
Вывести все дела, запланированные на день i текущего месяца.
NEXT
Перейти к списку дел на новый месяц.
При выполнении данной команды вместо текущего (старого) списка дел на текущий месяц создаётся и становится активным
(новый) список дел на следующий месяц: все дела со старого списка дел копируются в новый список. После выполнения данной
команды новый список дел и следующий месяц становятся текущими, а работа со старым списком дел прекращается. При
переходе к новому месяцу необходимо обратить внимание на разное количество дней в месяцах: если следующий месяц имеет
больше дней, чем текущий, «дополнительные» дни необходимо оставить пустыми (не содержащими дел); если следующий месяц
имеет меньше дней, чем текущий, меньше дней, дела со всех «лишних» дней необходимо переместить на последний день
следующего месяца.

Замечания
Историю списков дел хранить не требуется, работа ведется только с текущим списком дел
текущего месяца. Более того, при создании списка дел на следующий месяц, он «перетирает» предыдущий список. Обратите
внимание, что количество команд NEXT в общей последовательности команд при работе со списком дел может превышать 11.
Начальным текущим месяцем считается январь.Количества дней в месяцах соответствуют Григорианскому календарю с той лишь
разницей, что в феврале всегда 28 дней.

Формат ввода
Сначала число операций Q, затем описания операций.
Названия дел s уникальны и состоят только из латинских букв, цифр и символов подчёркивания. Номера дней iявляются целыми
числами и нумеруются от 1 до размера текущего месяца. Формат вывода Для каждой операции типа DUMP в отдельной строке
выведите количество дел в соответствующий день, а затем их названия, разделяя их пробелом. Порядок вывода дел в рамках
каждой операции значения не имеет.
*/
int main()
{

  int n, n_day = 0;
  string s_deal, cmd_s;
  cin >> n;
  int current_m = 0, next_m = 1;
  vector<int> months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  vector<vector<string>> deals(months[current_m]);
  // int month_now=monthes[current_m];
  for (int i = 0; i < n; ++i)
  {
    cin >> cmd_s;
    if (cmd_s == "NEXT")
    {

      if (months[current_m] > months[current_m + 1])
      {
        int count_day = months[current_m] - months[next_m];
        for (int k = 0; k < count_day; ++k)
          deals[months[next_m] - 1].insert(end(deals[months[next_m] - 1]), begin(deals[months[next_m] + k]),
                                           end(deals[months[next_m] + k]));
      }
      deals.resize(months[next_m]);

      ++current_m;
      ++next_m;
      if (current_m == 12)
        current_m = 0;
      if (next_m == 12)
        next_m = 0;
    }
    else if (cmd_s == "ADD")
    {
      cin >> n_day;
      cin >> s_deal;
      deals[n_day - 1].push_back(s_deal);
    }
    else if (cmd_s == "DUMP")
    {
      cin >> n_day;
      if (!deals[n_day - 1].empty())
      {
        cout << deals[n_day - 1].size() << " ";

        for (auto ds : deals[n_day - 1])
          cout << ds << " ";

        cout << endl;
      }
      else
        cout << 0 << endl;
    }
  }

  return 0;
}
